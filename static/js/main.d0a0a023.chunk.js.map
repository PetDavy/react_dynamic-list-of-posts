{"version":3,"sources":["api/api.js","api/posts.js","api/users.js","components/shapes/PostShape.js","components/shapes/UserShape.js","components/Post/Post.jsx","components/Loader/Loader.jsx","components/PostsList/PostsList.jsx","api/comments.js","components/FormField/FormField.jsx","components/NewCommentForm/NewCommentForm.jsx","components/PostInfo/PostInfo.jsx","components/CommentsInfo/CommentsInfo.jsx","components/shapes/CommentShape.js","components/Comments/Comments.jsx","components/CommentsBlock/CommentsBlock.jsx","components/PostDetails/PostDetails.jsx","components/AsideSelect/AsideSelect.jsx","App.jsx","index.js"],"names":["BASE_URL","fetchData","url","fetch","then","response","json","result","POST_REQUEST_URL","getAllPosts","a","posts","data","getUserPosts","userId","filter","post","getPostDetails","postId","USERS_REQUEST_URL","getUsers","users","slice","map","id","name","PropTypes","number","isRequired","string","Post","title","user","isOpen","toggletPost","className","classNames","type","onClick","Loader","PostsList","props","isLoading","key","find","COMMENTS_REQUEST_URL","getPostComments","comments","comment","body","postComment","commentData","errors","Object","values","some","value","ok","method","JSON","stringify","respones","deleteComment","EMAIL_VALIDATION","FormField","changeHandler","setErrors","error","validateInput","errorMessage","test","prevErrors","placeholder","onChange","onBlur","NewCommentForm","getComments","useState","setName","email","setEmail","setComment","addNewComment","onSubmit","event","preventDefault","target","PostInfo","date","Date","createdAt","displayDate","getFullYear","getMonth","getDate","CommentsInfo","isShownComments","setIsShownComments","length","fas","far","Comments","handleDelete","CommentsBlock","PostDetails","setPost","setComments","setIsLoading","showOpenPost","receivedPost","receivedComments","useEffect","foundUser","AsideSelect","userID","selectUser","App","setUsers","setUserID","setPosts","detailsPostId","setDetailsPostId","Number","receivedPosts","preparedPosts","setRecievedUsers","receivedUsers","setRecievedPosts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d0a0a023.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const fetchData = url => fetch(url)\n  .then(response => response.json())\n  .then(result => result);\n","import { BASE_URL, fetchData } from './api';\n\nconst POST_REQUEST_URL = `${BASE_URL}/posts`;\n\nexport const getAllPosts = async() => {\n  const posts = await fetchData(POST_REQUEST_URL);\n\n  return posts.data;\n};\n\nexport const getUserPosts = async(userId) => {\n  const posts = await getAllPosts();\n\n  if (!userId) {\n    return posts;\n  }\n\n  return posts.filter(post => post.userId === userId);\n};\n\nexport const getPostDetails = async(postId) => {\n  const post = await fetchData(`${POST_REQUEST_URL}/${postId}`);\n\n  return post;\n};\n","import { BASE_URL, fetchData } from './api';\n\nconst USERS_REQUEST_URL = `${BASE_URL}/users`;\n\nexport const getUsers = async() => {\n  const users = await fetchData(USERS_REQUEST_URL);\n\n  return users.data.slice(0, 10).map(({ id, name }) => ({\n    id,\n    name,\n  }));\n};\n","import PropTypes from 'prop-types';\n\nexport const PostShape = {\n  id: PropTypes.number.isRequired,\n  userId: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport const UserShape = {\n  id: PropTypes.number,\n  userId: PropTypes.number,\n  title: PropTypes.string,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { UserShape } from '../shapes/UserShape';\n\nexport const Post = ({ id, title, user, isOpen, toggletPost }) => (\n  <li\n    className={classNames('PostsList__item', {\n      'PostsList__item--open': isOpen,\n    })}\n  >\n    <div className=\"PostsList__item-wrapper\">\n      <i className=\"PostsList__icon far fa-copy\" />\n\n      <div className=\"PostsList__item-content\">\n        <div className=\"PostsList__item-user\">\n          {user.name}\n        </div>\n\n        <div className=\"PostsList__item-title\">\n          {title}\n        </div>\n      </div>\n    </div>\n    <button\n      type=\"button\"\n      className=\"PostsList__button button\"\n      onClick={() => toggletPost(id)}\n    >\n      {\n        isOpen ? 'Hide' : 'Show'\n      }\n    </button>\n  </li>\n);\n\nPost.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  user: PropTypes.shape(UserShape).isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  toggletPost: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport './PostsList.scss';\nimport PropTypes from 'prop-types';\nimport { PostShape } from '../shapes/PostShape';\nimport { UserShape } from '../shapes/UserShape';\nimport { Post } from '../Post';\nimport { Loader } from '../Loader';\n\nexport const PostsList = (props) => {\n  const { posts, toggletPost, postId, users, isLoading } = props;\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  return (\n    <div className=\"PostsList\">\n      <h2 className=\"PostsList__title\">Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {\n          posts.map(post => (\n            <Post\n              key={post.id}\n              id={post.id}\n              title={post.title}\n              user={users.find(user => user.id === post.userId)}\n              isOpen={post.id === postId}\n              toggletPost={toggletPost}\n            />\n          ))\n        }\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.shape(PostShape)).isRequired,\n  toggletPost: PropTypes.func.isRequired,\n  postId: PropTypes.number.isRequired,\n  users: PropTypes.arrayOf(PropTypes.shape(UserShape)).isRequired,\n  isLoading: PropTypes.bool.isRequired,\n};\n","import { BASE_URL, fetchData } from './api';\n\nconst COMMENTS_REQUEST_URL = `${BASE_URL}/comments`;\n\nexport const getPostComments = async(postId) => {\n  const comments = await fetchData(`${COMMENTS_REQUEST_URL}`);\n\n  return comments.data.filter(comment => (\n    comment.postId === postId && comment.body\n  ));\n};\n\nexport const postComment = async(commentData, errors) => {\n  const errorList = Object.values(errors);\n\n  if (errorList.some(value => value)) {\n    return { ok: false };\n  }\n\n  if (Object.values(commentData).some(value => !value)) {\n    return { ok: false };\n  }\n\n  const respones = await fetch(COMMENTS_REQUEST_URL, {\n    method: 'POST',\n    body: JSON.stringify(commentData),\n  });\n\n  return respones;\n};\n\nexport const deleteComment = async(commentData) => {\n  const respones = await fetch(`${COMMENTS_REQUEST_URL}/${commentData.id}`, {\n    method: 'DELETE',\n  });\n\n  return respones;\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\n// eslint-disable-next-line max-len\nconst EMAIL_VALIDATION = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nexport const FormField = (props) => {\n  const { value, changeHandler, name, errors, setErrors } = props;\n  const error = errors[name];\n\n  const validateInput = () => {\n    let errorMessage = '';\n\n    if (!value) {\n      errorMessage = `Please add ${name}`;\n    }\n\n    if (value && name === 'email' && !EMAIL_VALIDATION.test(value)) {\n      errorMessage = 'Please add correct email adress';\n    }\n\n    setErrors(prevErrors => ({\n      ...prevErrors,\n      [name]: errorMessage,\n    }));\n  };\n\n  return (\n    <div className=\"Form-field\">\n      {\n        name !== 'comment'\n          ? (\n            <input\n              type=\"text\"\n              name={name}\n              placeholder={`Your ${name}`}\n              value={value}\n              className={classNames('NewCommentForm__input', {\n                'NewCommentForm__error-input': error,\n              })}\n              onChange={changeHandler}\n              onBlur={validateInput}\n            />\n          ) : (\n            <textarea\n              name=\"body\"\n              placeholder=\"Type comment here\"\n              className={classNames('NewCommentForm__input', {\n                'NewCommentForm__error-input': error,\n              })}\n              value={value}\n              onChange={changeHandler}\n              onBlur={validateInput}\n            />\n\n          )\n      }\n\n      <h5 className=\"error\">{error}</h5>\n    </div>\n  );\n};\n\nFormField.propTypes = {\n  value: PropTypes.string.isRequired,\n  changeHandler: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  errors: PropTypes.shape({\n    name: PropTypes.string,\n    email: PropTypes.string,\n    comment: PropTypes.string,\n  }).isRequired,\n  setErrors: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { postComment } from '../../api/comments';\n\nimport { FormField } from '../FormField';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ postId, getComments }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n  const [errors, setErrors] = useState({});\n\n  const handleNameChange = (event) => {\n    setName(event.target.value);\n  };\n\n  const handleEmailChange = (event) => {\n    setEmail(event.target.value);\n  };\n\n  const handleCommentChange = (event) => {\n    setComment(event.target.value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    addNewComment();\n  };\n\n  const addNewComment = async() => {\n    const data = {\n      postId,\n      name,\n      email,\n      body: comment,\n    };\n\n    postComment(data, errors);\n\n    setComment('');\n    getComments(postId);\n  };\n\n  return (\n    <div className=\"PostDetails__form-wrapper\">\n      <form className=\"NewCommentForm\" onSubmit={handleSubmit}>\n        <header className=\"NewCommentForm__header\">New Comment</header>\n        <FormField\n          name=\"name\"\n          value={name}\n          changeHandler={handleNameChange}\n          errors={errors}\n          setErrors={setErrors}\n        />\n\n        <FormField\n          name=\"email\"\n          value={email}\n          changeHandler={handleEmailChange}\n          errors={errors}\n          setErrors={setErrors}\n        />\n\n        <FormField\n          name=\"comment\"\n          value={comment}\n          changeHandler={handleCommentChange}\n          errors={errors}\n          setErrors={setErrors}\n        />\n\n        <button\n          type=\"submit\"\n          className=\"NewCommentForm__submit-button button\"\n          value={comment}\n        >\n          Add a comment\n        </button>\n      </form>\n    </div>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  getComments: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { PostShape } from '../shapes/PostShape';\nimport { UserShape } from '../shapes/UserShape';\n\nexport const PostInfo = ({ post, user }) => {\n  const date = new Date(post.createdAt);\n  const displayDate = `\n    ${date.getFullYear()}/${date.getMonth() + 1}/${date.getDate()}\n  `;\n\n  return (\n    <section className=\"PostDetails__post\">\n      <h4 className=\"PostDetails__title\">{post.title}</h4>\n\n      <div className=\"PostDetails__info-wrapper\">\n        <i className=\"PostDetails__icon fas fa-calendar-minus\" />\n        <div className=\"PostDetails__general-info\">\n          <p>\n            <span className=\"PostDetails__text\">Created by</span>\n            <span className=\"blue-text\">{user.name}</span>\n          </p>\n          <p>\n            <span className=\"PostDetails__text\">Created at</span>\n            <span className=\"blue-text\">{displayDate}</span>\n          </p>\n        </div>\n\n      </div>\n      <p className=\"PostDetails__body\">{post.body}</p>\n    </section>\n  );\n};\n\nPostInfo.propTypes = {\n  post: PropTypes.shape(PostShape).isRequired,\n  user: PropTypes.shape(UserShape).isRequired,\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { CommentShape } from '../shapes/CommentShape';\n\nexport const CommentsInfo = (props) => {\n  const { comments, isShownComments, setIsShownComments } = props;\n\n  return (\n    <div className=\"PostDetails__coments-info\">\n      <p>{`${comments.length} Comments`}</p>\n      <button\n        type=\"button\"\n        className=\"PostDetails__button button\"\n        onClick={() => setIsShownComments(!isShownComments)}\n      >\n        <i\n          className={classNames('fa-comment-dots',\n            'PostDetails__comments-icon',\n            {\n              fas: isShownComments,\n              far: !isShownComments,\n            })}\n        />\n        {\n          isShownComments ? 'Hide' : 'Show'\n        }\n      </button>\n    </div>\n  );\n};\n\nCommentsInfo.propTypes = {\n  comments: PropTypes.arrayOf(PropTypes.shape(CommentShape)).isRequired,\n  isShownComments: PropTypes.bool.isRequired,\n  setIsShownComments: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport const CommentShape = {\n  id: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  body: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CommentShape } from '../shapes/CommentShape';\n\nexport const Comments = ({ comments, handleDelete }) => (\n  <ul className=\"PostDetails__list\">\n    {\n      comments.map(comment => (\n        <li key={comment.id} className=\"PostDetails__list-item\">\n          <button\n            type=\"button\"\n            className=\"PostDetails__remove-button button\"\n            onClick={() => handleDelete(comment)}\n          >\n            <i className=\"fas fa-trash-alt\" />\n          </button>\n          <div className=\"PostDetails__comment-wrapper\">\n            <h6 className=\"PostDetails__list-item-user\">\n              <b>{comment.name}</b>\n            </h6>\n            <p>{comment.body}</p>\n          </div>\n        </li>\n      ))\n    }\n  </ul>\n);\n\nComments.propTypes = {\n  comments: PropTypes.arrayOf(PropTypes.shape(CommentShape)).isRequired,\n  handleDelete: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CommentsInfo } from '../CommentsInfo';\nimport { Comments } from '../Comments';\nimport { CommentShape } from '../shapes/CommentShape';\n\nexport const CommentsBlock = (props) => {\n  const { comments, isShownComments, setIsShownComments, handleDelete } = props;\n\n  return (\n    <section className=\"PostDetails__comments\">\n      {\n        !!comments.length && (\n          <CommentsInfo\n            comments={comments}\n            isShownComments={isShownComments}\n            setIsShownComments={setIsShownComments}\n          />\n        )\n      }\n\n      {\n        isShownComments && (\n          <Comments\n            comments={comments}\n            handleDelete={handleDelete}\n          />\n        )\n      }\n    </section>\n  );\n};\n\nCommentsBlock.propTypes = {\n  comments: PropTypes.arrayOf(PropTypes.shape(CommentShape)).isRequired,\n  isShownComments: PropTypes.bool.isRequired,\n  setIsShownComments: PropTypes.func.isRequired,\n  handleDelete: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments, deleteComment } from '../../api/comments';\n\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { PostInfo } from '../PostInfo';\nimport { CommentsBlock } from '../CommentsBlock';\n\nimport { UserShape } from '../shapes/UserShape';\n\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ postId, users }) => {\n  const [post, setPost] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [isShownComments, setIsShownComments] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const showOpenPost = async(id) => {\n    setIsLoading(true);\n\n    const receivedPost = await getPostDetails(id);\n\n    setIsLoading(false);\n\n    setPost(receivedPost.data);\n    setIsShownComments(false);\n  };\n\n  const getComments = async(id) => {\n    if (!id) {\n      setComments([]);\n\n      return;\n    }\n\n    const receivedComments = await getPostComments(id);\n\n    setComments(receivedComments);\n  };\n\n  const handleDelete = async(comment) => {\n    deleteComment(comment);\n\n    getComments(postId);\n  };\n\n  useEffect(() => {\n    showOpenPost(postId);\n    getComments(postId);\n  }, [postId]);\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  if (post) {\n    const foundUser = users.find(user => user.id === post.userId);\n\n    return (\n      <div className=\"PostDetails\">\n        <div className=\"PostDetails__wrapper\">\n          <PostInfo\n            post={post}\n            user={foundUser}\n          />\n\n          <CommentsBlock\n            comments={comments}\n            isShownComments={isShownComments}\n            setIsShownComments={setIsShownComments}\n            handleDelete={handleDelete}\n          />\n\n          <NewCommentForm\n            postId={postId}\n            getComments={getComments}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"PostDetails PostDetails__no-post\">\n      <h2 className=\"PostDetails\">Post not selected</h2>\n      <i className=\"PostDetails__no-post-icon fas fa-scroll\" />\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  postId: PropTypes.number.isRequired,\n  users: PropTypes.arrayOf(PropTypes.shape(UserShape)).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { UserShape } from '../shapes/UserShape';\n\nexport const AsideSelect = ({ userID, selectUser, users }) => (\n  <aside className=\"App__aside\">\n    <label className=\"App__aside-label\">\n      <h4 className=\"App__aside-title\">Select a user: &nbsp;</h4>\n      <select\n        className=\"App__user-selector\"\n        value={userID}\n        onChange={selectUser}\n      >\n        <option value=\"0\">All users</option>\n        {\n          users.map(user => (\n            <option\n              key={user.id}\n              value={user.id}\n            >\n              {user.name}\n            </option>\n          ))\n        }\n      </select>\n    </label>\n  </aside>\n);\n\nAsideSelect.propTypes = {\n  userID: PropTypes.number.isRequired,\n  selectUser: PropTypes.func.isRequired,\n  users: PropTypes.arrayOf(PropTypes.shape(UserShape)).isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { getAllPosts, getUserPosts } from './api/posts';\nimport { getUsers } from './api/users';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { AsideSelect } from './components/AsideSelect';\n\nconst App = () => {\n  const [users, setUsers] = useState([]);\n  const [userID, setUserID] = useState(0);\n  const [posts, setPosts] = useState([]);\n  const [detailsPostId, setDetailsPostId] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const selectUser = async(event) => {\n    const { value } = event.target;\n\n    setUserID(Number(value));\n    const receivedPosts = await getUserPosts(Number(value));\n\n    const preparedPosts = receivedPosts.map(post => ({\n      id: post.id,\n      userId: post.userId,\n      title: post.title,\n    }\n    ));\n\n    setPosts(preparedPosts);\n  };\n\n  const setRecievedUsers = async() => {\n    const receivedUsers = await getUsers();\n\n    setUsers(receivedUsers);\n  };\n\n  const setRecievedPosts = async() => {\n    const receivedPosts = await getAllPosts();\n\n    setIsLoading(false);\n\n    const preparedPosts = receivedPosts.map(post => ({\n      id: post.id,\n      userId: post.userId,\n      title: post.title,\n    }\n    ));\n\n    setPosts(preparedPosts);\n  };\n\n  useEffect(() => {\n    setRecievedUsers();\n    setRecievedPosts();\n  }, []);\n\n  const toggletPost = (postId) => {\n    if (postId === detailsPostId) {\n      setDetailsPostId(0);\n\n      return;\n    }\n\n    setDetailsPostId(postId);\n  };\n\n  return (\n    <div className=\"App\">\n      <AsideSelect\n        userID={userID}\n        selectUser={selectUser}\n        users={users}\n      />\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            toggletPost={toggletPost}\n            postId={detailsPostId}\n            users={users}\n            isLoading={isLoading}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails\n            postId={detailsPostId}\n            users={users}\n          />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}